d.tree_imp = rpart(Satisfaction ~ .,
data = train_imp,
method = 'class')
d.tree_imp = rpart(Satisfaction ~ .,
data = train_imp,
method = 'class')
# Predict Values
predicted_values <- predict(d.tree_imp, test_imp, type = 'class')
cm <- confusionMatrix(as.factor(test$Satisfaction), predicted_values)
save(cm , file = "Confusion_matrix_imp")
load("cm_apc.Rdata")
save(cm_apc , file = "cm_apc.Rdata")
cm_apc
apc_variable <- c(9,10,13,15,17,20,21,23)
train_apc <- train[,apc_variable]
test_apc <- test[,apc_variable[1:length(apc_variable)-1]]
d.tree_acp = rpart(Satisfaction ~ .,
data = train_apc,
method = 'class')
# Predict Values
predicted_values_acp <- predict(d.tree_acp, test_apc , type = 'class')
cm_apc <- confusionMatrix(as.factor(test$Satisfaction), predicted_values_acp)
cm_apc
save(cm_apc , file = "cm_apc.Rdata")
load("cm_apc.Rdata")
save(cm,file ="Confusion_matrix_imp.RData")
save(cm,file ="Confusion_matrix_imp.RData")
chisq.test(airline_data$Gender ~ airline_data$Satisfaction)
chisq.test(airline_data$Gender ~ airline_data$Satisfaction)
airline_data$Gender
airline_data$Satisfaction
counts <- prop.table(table(airline_data$Gender  , airline_data$Satisfaction))
chisq.test(counts)
chisq.test(
)
counts
t.test(airline_data$Age ~ airline_data$Satisfaction)
test <- t.test(airline_data$Age ~ airline_data$Satisfaction)
test$statistic
test$data.name
test
test$estimate
test <- t.test(airline_data$Age ~ airline_data$Satisfaction)
test$estimate
test$p.value
fac_scores_PC_1_2_ranked[1:7]
impor_indici <- c(4 ,5,12 ,15, 19 , 21, 17 , 23)
train_imp <- train[, impor_indici]
train_imp
str(train)
str(train_apc)
str(train)
impor_indici <- c(4 ,5, 12 ,15, 19 , 21, 17 , 23)
train_imp <- train[, impor_indici]
str(train_imp)
impor_indici <- c(4 ,5, 12 ,15, 19 , 21, 17 , 23)
train_imp <- train[, impor_indici]
test_imp <- test[, impor_indici[1:length(impor_indici)-1]]
test_imp <- test[, impor_indici[1:length(impor_indici)-1]]
test_imp
test
test
str(train)
impor_indici <- c(4 ,5, 12 ,15, 19 , 21, 17 , 23)
train_imp <- train[, impor_indici]
test_imp <- test[, impor_indici[1:length(impor_indici)-1]]
# 80% per il training
perc_train <- 0.8
# nÂ° osservazioni per il training set
size_train <- as.integer(nrow(airline_data2) * perc_train )
# Random indici delle osservazioni
idx <- sample(1:nrow(airline_data2),size = size_train)
# Train set 80% (alleno il modello)
train <- airline_data2[idx,]
# Test: 20% (testo  perfomance del modello).
test  <- airline_data2[-idx,]
test_imp <- test[, impor_indici[1:length(impor_indici)-1]]
impor_indici <- c(4 ,5, 12 ,15, 19 , 21, 17 , 23)
train_imp <- train[, impor_indici]
test_imp <- test[, impor_indici[1:length(impor_indici)-1]]
d.tree_imp = rpart(Satisfaction ~ .,
data = train_imp,
method = 'class')
# Predict Values
predicted_values <- predict(d.tree_imp, test_imp, type = 'class')
cm <- confusionMatrix(as.factor(test$Satisfaction), predicted_values)
accuratezza <- sum(diag(cm$table)) / sum(cm$table)
accuratezza
cm
save(cm, file = "cm_apc.Rdata" )
save(cm, file = "cm_imp.Rdata" )
apc_variable <- c(9,10,12,13,15,17,20,21,23)
train_apc <- train[,apc_variable]
test_apc <- test[,apc_variable[1:length(apc_variable)-1]]
train_apc
Ease.of.Online.Booking"                 "In.flight.Wifi.Service"
[3] "Departure.and.Arrival.Time.Convenience" "Gate.Location"
[5] "In.flight.Entertainment"                "Seat.Comfort"
[7] "Online.Boarding"
str(train_apc)
apc_variable <- c(9,10,12,13,17,20,21,23)
train_apc <- train[,apc_variable]
test_apc <- test[,apc_variable[1:length(apc_variable)-1]]
str(train_apc)
str(train)
apc_variable <- c(9,10,12,13,15,20,21,23)
train_apc <- train[,apc_variable]
test_apc <- test[,apc_variable[1:length(apc_variable)-1]]
d.tree_acp = rpart(Satisfaction ~ .,
data = train_apc,
method = 'class')
# Predict Values
predicted_values_acp <- predict(d.tree_acp, test_apc , type = 'class')
cm_apc <- confusionMatrix(as.factor(test$Satisfaction), predicted_values_acp)
accuratezza <- sum(diag(cm_apc$table)) / sum(cm_apc$table)
accuratezza
save(cm, file = "cm_imp.RData" )
save(cm_apc, file = "cm_apc.RData" )
save(cm, file = "cm_imp.RData" )
save(cm_apc, file = "cm_apc.RData" )
load("cm_imp.RData")
load("cm_apc.RData")
load("cm_imp.RData")
load("cm_apc.RData")
accuratezza <- sum(diag(cm$table)) / sum(cm$table)
accuratezza
accuratezza2 <- sum(diag(cm_apc$table)) / sum(cm_apc$table)
accuratezza2
impor_indici <- c(4 ,5, 12 ,15, 19 , 21, 17 , 23)
train_imp <- train[, impor_indici]
test_imp <- test[, impor_indici[1:length(impor_indici)-1]]
d.tree_imp = rpart(Satisfaction ~ .,
data = train_imp,
method = 'class')
# Predict Values
predicted_values <- predict(d.tree_imp, test_imp, type = 'class')
cm <- confusionMatrix(as.factor(test$Satisfaction), predicted_values)
accuratezza <- sum(diag(cm$table)) / sum(cm$table)
accuratezza
# Accuratezza variabili importanti
accuratezza <- sum(diag(cm$table)) / sum(cm$table)
accuratezza
# Accuratezza variabili da apc
accuratezza2 <- sum(diag(cm_apc$table)) / sum(cm_apc$table)
accuratezza2
apc_variable <- c(9,10,12,13,15,20,21,23)
train_apc <- train[,apc_variable]
test_apc <- test[,apc_variable[1:length(apc_variable)-1]]
d.tree_acp = rpart(Satisfaction ~ .,
data = train_apc,
method = 'class')
# Predict Values
predicted_values_acp <- predict(d.tree_acp, test_apc , type = 'class')
cm_apc <- confusionMatrix(as.factor(test$Satisfaction), predicted_values_acp)
accuratezza <- sum(diag(cm_apc$table)) / sum(cm_apc$table)
accuratezza
print("Accuratezza seleziondo solo le variabili scelte dal precente albero",accuratezza)
print(paste0("Accuratezza seleziondo solo le variabili scelte dal precente albero",accuratezza))
# Accuratezza variabili importanti
accuratezza <- sum(diag(cm$table)) / sum(cm$table)
print(paste0("Accuratezza seleziondo solo le variabili scelte dal precente albero: ",accuratezza))
# Accuratezza variabili da apc
accuratezza2 <- sum(diag(cm_apc$table)) / sum(cm_apc$table)
print(paste0("Accuratezza seleziondo solo le variabili scelte dalla apc: ",accuratezza2))
rm(list = ls())
library(naniar)
library(tidyverse)
library(ggplot2)
library(reshape2)
library(heatmaply)
library(factoextra)
library(FactoMineR)
library(tree)
library(corrplot)
library(dplyr)
library(rpart)
library(rpart.plot)
library(Metrics)
library(mlr)
library(plotly)
library(caret)
library(cvms)
# Pulizia dei dati) ------------------------------------------------------------
airline_data <- read.csv("airline_passenger_satisfaction.csv")
# Struttura del Dataset
head(airline_data)
summary(airline_data)
str(airline_data)  # 24 variabili per 129880 osservazioni
# Clean the data
# Eliminazione di informazioni inutili
airline_data <- airline_data[,!names(airline_data) == 'ID']
# ricodifichiamo la variablile Flight Distance da miglia a km  (conversione 1 miglio = 1.60934 km)
airline_data$Flight.Distance <- airline_data$Flight.Distance * 1.60934
# Gestione dei dati mancanti
sum(is.na(airline_data)) / nrow(airline_data)  # ci sono 393 valori mancanti, 0,3 % dei dati
# Possiamo direttamente eliminarli , proporzione dei dati non significativa.
airline_data <- na.omit(airline_data)  # Tolgo le variabili
# Correggiamo i dati
airline_data = airline_data[airline_data$Gate.Location != 0,]
airline_data = airline_data[airline_data$Departure.and.Arrival.Time.Convenience != 0,]
airline_data = airline_data[airline_data$Ease.of.Online.Booking != 0,]
airline_data = airline_data[airline_data$Check.in.Service != 0,]
airline_data = airline_data[airline_data$Online.Boarding != 0,]
airline_data = airline_data[airline_data$Gate.Location!= 0,]
airline_data = airline_data[airline_data$On.board.Service != 0,]
airline_data = airline_data[airline_data$Seat.Comfort!= 0,]
airline_data = airline_data[airline_data$Leg.Room.Service!= 0,]
airline_data = airline_data[airline_data$Cleanliness != 0,]
airline_data = airline_data[airline_data$Food.and.Drink != 0,]
airline_data = airline_data[airline_data$In.flight.Service != 0,]
airline_data = airline_data[airline_data$In.flight.Wifi.Service != 0,]
airline_data = airline_data[airline_data$In.flight.Entertainment != 0,]
airline_data = airline_data[airline_data$Baggage.Handling != 0,]
counts <- prop.table(table(airline_data$Gender  , airline_data$Satisfaction))
barplot(counts, col=c("#f38fa9","#58b1cd"),legend = rownames(counts), beside=TRUE)
chisq.test(counts)
library(RColorBrewer)
myPalette <- brewer.pal(3, "Set2")
pie(prop.table(table(airline_data$Class)) ,
border="white", col= myPalette )
counts <- prop.table(table(airline_data$Gender  , airline_data$Satisfaction))
barplot(counts, col=c("#f38fa9","#58b1cd"),legend = rownames(counts), beside=TRUE)
counts <- prop.table(table(airline_data$Gender  , airline_data$Satisfaction))
barplot(counts, col=c("#f38fa9","#58b1cd"),legend = rownames(counts), beside=TRUE)
counts <- prop.table(airline_data$Gender)
barplot(counts, col=c("#f38fa9","#58b1cd"),legend = rownames(counts), beside=TRUE)
counts <- prop.table(table(airline_data$Gender))
barplot(counts, col=c("#f38fa9","#58b1cd"),legend = rownames(counts), beside=TRUE)
counts <- prop.table(table(airline_data$Gender))
barplot(counts, col=c("#f38fa9","#58b1cd"),legend = rownames(counts), beside=TRUE)
barplot(counts, col=c("#f38fa9","#58b1cd"),legend = rownames(counts), beside=TRUE,ylim = c(0.0.8))
counts <- prop.table(table(airline_data$Gender))
barplot(counts, col=c("#f38fa9","#58b1cd"),legend = rownames(counts), beside=TRUE,ylim = c(0.0.8))
counts <- prop.table(table(airline_data$Gender))
barplot(counts, col=c("#f38fa9","#58b1cd"),legend = rownames(counts), beside=TRUE, ylim = c(0,0.8))
barplot(counts, col=c("#f38fa9","#58b1cd"),legend = rownames(counts), beside=TRUE, ylim = c(0,0.8),names.arg = c("Femmine","Maschi"))
library(RColorBrewer)
myPalette <- brewer.pal(3, "Set2")
pie(prop.table(table(airline_data$Class)) ,
border="white", col= myPalette )
### tipo di viaggio ###
pie(prop.table(table(airline_data$Type.of.Travel)) ,
border="white", col= myPalette )
pie(prop.table(table(airline_data$Customer.Type)) ,
border="white", col= myPalette )
pie(prop.table(table(airline_data$Satisfaction)) ,
border="white", col= myPalette )
#--Variabili Quantitative --#
hist(airline_data$Age , prob = T ,
col = "steelblue" , border = "white",
xlab = "EtÃ  dei clienti" ,
ylim = c(0,0.027))
lines(density(airline_data$Age) , lwd = 3 , col = "#DDF227")
airline_data <- airline_data[(airline_data$Age >= 18), ]
age_class <- factor(cut(airline_data$Age ,
breaks = c(18 , 25 , 35 , 50, 65 , 85),
include.lowest = TRUE))
counts_age <- prop.table(table( age_class , airline_data$Satisfaction))
myPalette <- brewer.pal(5, "Set3")
barplot(counts_age,
beside=TRUE ,
col =  myPalette )
# Pulizia dei dati) ------------------------------------------------------------
airline_data <- read.csv("airline_passenger_satisfaction.csv")
# Struttura del Dataset
airline_data$Departure.and.Arrival.Time.Convenience
str(airline_data)  # 24 variabili per 129880 osservazioni
# Clean the data
# Eliminazione di informazioni inutili
airline_data <- airline_data[,!names(airline_data) == 'ID']
# ricodifichiamo la variablile Flight Distance da miglia a km  (conversione 1 miglio = 1.60934 km)
airline_data$Flight.Distance <- airline_data$Flight.Distance * 1.60934
# Gestione dei dati manncanti
sum(is.na(airline_data)) / nrow(airline_data) * 100 # ci sono 393 valori mancanti, 0,3 % dei dati
# Possiamo direttamente eliminarli , proporzione dei dati non significativa.
airline_data <- na.omit(airline_data)  # Tolgo le variabili
# Eliminazione dei passeggeri minorenni
airline_data <- airline_data[(airline_data$Age >= 18), ]
# Correggiamo i dati
airline_data = airline_data[airline_data$Gate.Location != 0,]
airline_data = airline_data[airline_data$Departure.and.Arrival.Time.Convenience != 0,]
airline_data = airline_data[airline_data$Ease.of.Online.Booking != 0,]
airline_data = airline_data[airline_data$Check.in.Service != 0,]
airline_data = airline_data[airline_data$Online.Boarding != 0,]
airline_data = airline_data[airline_data$Gate.Location!= 0,]
airline_data = airline_data[airline_data$On.board.Service != 0,]
airline_data = airline_data[airline_data$Seat.Comfort!= 0,]
airline_data = airline_data[airline_data$Leg.Room.Service!= 0,]
airline_data = airline_data[airline_data$Cleanliness != 0,]
airline_data = airline_data[airline_data$Food.and.Drink != 0,]
airline_data = airline_data[airline_data$In.flight.Service != 0,]
airline_data = airline_data[airline_data$In.flight.Wifi.Service != 0,]
airline_data = airline_data[airline_data$In.flight.Entertainment != 0,]
airline_data = airline_data[airline_data$Baggage.Handling != 0,]
counts <- prop.table(table(airline_data$Gender  , airline_data$Satisfaction))
barplot(counts, col=c("#f38fa9","#58b1cd"),legend = rownames(counts), beside=TRUE)
chisq.test(counts)
prop.table(table(airline_data$Gender))
library(RColorBrewer)
myPalette <- brewer.pal(3, "Set2")
pie(prop.table(table(airline_data$Class)) ,
border="white", col= myPalette )
?pie
myPalette <- brewer.pal(3, "Set2")
pie(prop.table(table(airline_data$Class)) ,
border="white", col= myPalette )
hist(airline_data$Age , prob = T ,
col = "steelblue" , border = "white",
xlab = "EtÃ  dei clienti" ,
ylim = c(0,0.027))
lines(density(airline_data$Age) , lwd = 3 , col = "#DDF227")
#--Variabili Quantitative --#
hist(airline_data$Age , prob = T ,
col = "steelblue" , border = "white",
xlab = "EtÃ  dei clienti" ,
ylim = c(0,0.027),
main = "")
lines(density(airline_data$Age) , lwd = 3 , col = "#DDF227")
age_class <- factor(cut(airline_data$Age ,
breaks = c(18 , 25 , 35 , 50, 65 , 85),
include.lowest = TRUE))
legend( x = 5.3, y = 0.2 , legend = rownames(counts_age) ,
col = myPalette , bg = "white") # [TODO]
# Flight Distance --> principalmente i voli hanno una distanza inferiore ai 4000 km.
hist(airline_data$Flight.Distance , prob = T,
col = "cyan4" , border = "white",
xlab = "Distanza dei voli"
)
lines(density(airline_data$Flight.Distance) , lwd = 2 , col = "pink")
# Departure Delay # -- Ã¨ omessa perchÃ¨ Ã¨ uguale ad Arrival Delay.
# Arrival Delay # ->
# La maggior parte dei voli non hanno ritardi in arrivo
hist(airline_data$Arrival.Delay)
plot(airline_data$Departure.Delay ,airline_data$Arrival.Delay )
cor(-airline_data$Departure.Delay ,airline_data$Arrival.Delay) # C'Ã¨ una correlazione tra queste due variabili....
# Gate Location
# On-board Service
# Seat Comfort
# Leg Room Service
# Cleanliness
# Food and Drink
# In-flight Service
# In-flight Wifi Service
# In-flight Entertainment
# Baggage Handling
barplot(table(airline_data$Cleanliness))
# Analizziamo una variabile per volta (iniziamo facendolo per la varibaile etÃ ), sostituire dopo con le altre.
variabile = airline_data$Age
# HEATMAP della correlazione, vediamo quali variabili sono maggiormente legate tra loro
#creo "airline_data2" per ricodificare tutte le variabili qualitative in variabili quantitative (le varibili quantitative mi servono per rappresentare l'heatmap)
airline_data2 = airline_data
airline_data2$Gender <- as.numeric(factor(airline_data2$Gender , 0:1 ,0:1 , levels = c("Male", "Female")))
airline_data2$Customer.Type <- as.numeric(factor(airline_data2$Customer.Type , 0:1 ,0:1 , levels = c("Returning", "First-time")))
airline_data2$Type.of.Travel <- as.numeric(factor(airline_data2$Type.of.Travel , 0:1 ,0:1 , levels = c("Personal", "Business")))
airline_data2$Class <- as.numeric(factor(airline_data2$Class , 0:2 ,0:2 , levels = c("Economy","Economy Plus", "Business")))
airline_data2$Satisfaction <- as.numeric(factor(airline_data2$Satisfaction, 0:1 ,0:1 , levels = c("Neutral or Dissatisfied","Satisfied")))
str(airline_data2)
corrplot(cor(airline_data2) , diag = T, order = 'hclust', addrect = 9, rect.col = 'blue', rect.lwd = 3 , tl.cex=0.5)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(tidyverse)
library(ggplot2)
library(reshape2)
library(factoextra)
library(FactoMineR)
library(tree)
library(corrplot)
library(dplyr)
library(rpart)
library(rpart.plot)
library(Metrics)
library(RColorBrewer)
library(plotly)
library(caret)
library(cvms)
# Importazione del Dataset
airline_data <- read.csv("airline_passenger_satisfaction.csv")
# Eliminazione della variabile ID
airline_data <- airline_data[,!names(airline_data) == 'ID']
# Ricodifica della unitÃ² di misura utilizzata da miglia a chilometri
airline_data$Flight.Distance <- airline_data$Flight.Distance * 1.60934
# Eliminazione di tutte le osservazioni mancanti
airline_data <- na.omit(airline_data)
# Eliminazioni delle osservazioni minorenni
airline_data <- airline_data[(airline_data$Age >= 18), ]
# Correggiamo i dati
airline_data = airline_data[airline_data$Gate.Location != 0,]
airline_data = airline_data[airline_data$Departure.and.Arrival.Time.Convenience != 0,]
airline_data = airline_data[airline_data$Ease.of.Online.Booking != 0,]
airline_data = airline_data[airline_data$Check.in.Service != 0,]
airline_data = airline_data[airline_data$Online.Boarding != 0,]
airline_data = airline_data[airline_data$Gate.Location!= 0,]
airline_data = airline_data[airline_data$On.board.Service != 0,]
airline_data = airline_data[airline_data$Seat.Comfort!= 0,]
airline_data = airline_data[airline_data$Leg.Room.Service!= 0,]
airline_data = airline_data[airline_data$Cleanliness != 0,]
airline_data = airline_data[airline_data$Food.and.Drink != 0,]
airline_data = airline_data[airline_data$In.flight.Service != 0,]
airline_data = airline_data[airline_data$In.flight.Wifi.Service != 0,]
airline_data = airline_data[airline_data$In.flight.Entertainment != 0,]
airline_data = airline_data[airline_data$Baggage.Handling != 0,]
counts <- prop.table(table(airline_data$Gender))
barplot(counts, col=c("#f38fa9","#58b1cd"),
legend = rownames(counts),
ylim = c(0,0.8) ,
args.legend = list(x = "topright"))
counts <- prop.table(table(airline_data$Gender,
airline_data$Satisfaction))
counts
barplot(counts, col=c("#f38fa9","#58b1cd"),legend = rownames(counts), beside=TRUE , ylim = c(0,0.4))
counts <- prop.table(table(airline_data$Gender  , airline_data$Satisfaction))
chisq.test(counts)
#FASCIA DI ETA' tra i 30 ed i 60
sum(airline_data$Age>30 & airline_data$Age<60)/110246
#FASCIA DI ETA' sotto i 30 anni
sum(airline_data$Age<30)/110246
#FASCIA DI ETA' sopra i 60
sum(airline_data$Age>60)/110246
hist(airline_data$Age , prob = T ,
col = "steelblue" , border = "white",
xlab = "EtÃ  dei clienti" , ylab = "DensitÃ ",
ylim = c(0,0.027) , main = "")
box()
lines(density(airline_data$Age) , lwd = 3 , col = "#DDF227")
age_class <- factor(cut(airline_data$Age ,
breaks = c(18 , 25 , 35 , 50, 65 , 85),
include.lowest = TRUE))
counts_age <- prop.table(table( age_class , airline_data$Satisfaction))
myPalette <- brewer.pal(5, "Set3")
barplot(counts_age,
col =  myPalette ,legend = rownames(counts_age), ylim = c(0,0.8), args.legend = list(bty = "n", x = "top", ncol = 3) )
t_test <- t.test(airline_data$Age ~ airline_data$Satisfaction)
t_test$estimate
t_test$p.value
airline_data2 = airline_data
airline_data2$Gender <- as.numeric(factor(airline_data2$Gender , 0:1 ,0:1 , levels = c("Male", "Female")))
airline_data2$Customer.Type <- as.numeric(factor(airline_data2$Customer.Type , 0:1 ,0:1 , levels = c("Returning", "First-time")))
airline_data2$Type.of.Travel <- as.numeric(factor(airline_data2$Type.of.Travel , 0:1 ,0:1 , levels = c("Personal", "Business")))
airline_data2$Class <- as.numeric(factor(airline_data2$Class , 0:2 ,0:2 , levels = c("Economy","Economy Plus", "Business")))
airline_data2$Satisfaction <- as.numeric(factor(airline_data2$Satisfaction, 0:1 ,0:1 , levels = c("Neutral or Dissatisfied","Satisfied")))
corrplot(cor(airline_data2[,c(2,c(7:length(airline_data2)))]) , diag = T, order = 'hclust', addrect = 5, rect.col = 'blue', rect.lwd = 3 , tl.cex=0.5)
airline_data2 = airline_data
airline_data2$Gender <- as.numeric(factor(airline_data2$Gender , 0:1 ,0:1 , levels = c("Male", "Female")))
airline_data2$Customer.Type <- as.numeric(factor(airline_data2$Customer.Type , 0:1 ,0:1 , levels = c("Returning", "First-time")))
airline_data2$Type.of.Travel <- as.numeric(factor(airline_data2$Type.of.Travel , 0:1 ,0:1 , levels = c("Personal", "Business")))
airline_data2$Class <- as.numeric(factor(airline_data2$Class , 0:2 ,0:2 , levels = c("Economy","Economy Plus", "Business")))
airline_data2$Satisfaction <- as.numeric(factor(airline_data2$Satisfaction, 0:1 ,0:1 , levels = c("Neutral or Dissatisfied","Satisfied")))
corrplot(cor(airline_data2[,c(2,c(7:length(airline_data2)))]) , diag = T, order = 'hclust', addrect = 5, rect.col = 'blue', rect.lwd = 3 , tl.cex=0.5)
load("bestmodel.RData")
rpart.plot(best_model)
df <- data.frame(imp = best_model$variable.importance)
df2 <- df %>%
tibble::rownames_to_column() %>%
dplyr::rename("variable" = rowname) %>%
dplyr::arrange(imp) %>%
dplyr::mutate(variable = forcats::fct_inorder(variable))
ggplot2::ggplot(df2 ) +
geom_col(aes(x = variable, y = imp ,  fill = 'white'),
col = "green", show.legend = F) +
coord_flip() +
theme_bw()
load("apc.RData")
load("prop_varianza.Rdata")
plot(cumsum(prop_varex), xlab = "Componenti Principali",
ylab = "Varianza cumulata spiegata dalle PC",
type = "o",
col = 'darkred' ,
lwd = 3)
abline(h = 0.95 , lty = 2 , col = 'darkgreen')
abline(v = 17 , lty = 2 , col = 'darkgreen')
grid()
?sample
rm(list = ls())
test_set_vero <- read.csv("test.csv")
train_set <- read.csv("train.csv")
train_set$x_2 <- (train_set$x )^ 2
train_set$x_3 <- (train_set$x) ^ 3
train_set$x_4 <- (train_set$x )^ 4
train_set$x_5 <- (train_set$x) ^ 5
train_set$x_6 <- (train_set$x )^ 6
train_set$x_7 <- (train_set$x )^ 7
train_set$x_8 <- (train_set$x )^ 8
train_set$x_9 <- (train_set$x )^ 9
test_set_vero$x_2 <- (test_set_vero$x )^ 2
test_set_vero$x_3 <- (test_set_vero$x) ^ 3
test_set_vero$x_4 <- (test_set_vero$x )^ 4
test_set_vero$x_5 <- (test_set_vero$x) ^ 5
setwd("~/Documents/GitHub/Kaggle_competition")
rm(list = ls())
test_set_vero <- read.csv("test.csv")
train_set <- read.csv("train.csv")
train_set$x_2 <- (train_set$x )^ 2
train_set$x_3 <- (train_set$x) ^ 3
train_set$x_4 <- (train_set$x )^ 4
train_set$x_5 <- (train_set$x) ^ 5
train_set$x_6 <- (train_set$x )^ 6
train_set$x_7 <- (train_set$x )^ 7
train_set$x_8 <- (train_set$x )^ 8
train_set$x_9 <- (train_set$x )^ 9
test_set_vero$x_2 <- (test_set_vero$x )^ 2
test_set_vero$x_3 <- (test_set_vero$x) ^ 3
test_set_vero$x_4 <- (test_set_vero$x )^ 4
test_set_vero$x_5 <- (test_set_vero$x) ^ 5
test_set_vero$x_6 <- (test_set_vero$x )^ 6
test_set_vero$x_7 <- (test_set_vero$x) ^ 7
test_set_vero$x_8 <- (test_set_vero$x) ^ 8
test_set_vero$x_9 <- (test_set_vero$x) ^ 9
plot(train_set$x,train_set$y)
model <- lm( y ~  . , data = train_set[300:length(train_set$x),])
pred <-predict(model, test_set_vero )
points(test_set_vero$x , pred , col = 'red')
test_set_vero$x
